// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[] @relation("RestaurantMenuCategories")
  products       Product[]      @relation("RestaurantProducts")
  orders         Order[]        @relation("RestaurantOrders")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  slug         String
  description  String
  restaurant   Restaurant @relation("RestaurantMenuCategories", fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products     Product[]  @relation("MenuCategoryProducts")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurant     Restaurant     @relation("RestaurantProducts", fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
  menuCategory   MenuCategory   @relation("MenuCategoryProducts", fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String
  orderProducts  OrderProduct[] @relation("ProductOrderProducts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  orderProducts     OrderProduct[]    @relation("OrderOrderProducts")
  restaurant        Restaurant        @relation("RestaurantOrders", fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  consumptionMethod ConsumptionMethod
  user              User              @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  product   Product  @relation("ProductOrderProducts", fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation("OrderOrderProducts", fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  cpf       String   @unique
  orders    Order[]  @relation("UserOrders")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole @default(CUSTOMER)
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}

enum UserRole {
  ADMIN
  CUSTOMER
}
